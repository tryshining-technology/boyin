# 工作流名称
name: Build Python Application

# 触发工作流的事件
on:
  # 1. 当代码被推送到 main 或 master 分支时触发
  push:
    branches: [ "main", "master" ]
  # 2. 允许你从 GitHub Actions 页面手动触发此工作流
  workflow_dispatch:

# 工作流中运行的任务（Jobs）
jobs:
  # 定义一个名为 "build-windows" 的任务
  build-windows:
    # 指定运行此任务的虚拟机环境 (Windows 最新版)
    runs-on: windows-latest

    # 任务的步骤
    steps:
      # 第 1 步：检出（下载）你的代码到虚拟机
      - name: Check out repository code
        uses: actions/checkout@v4

      # 第 2 步：设置 Python 3.11 环境
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # 第 3 步：安装项目依赖和打包工具
      # 这一步会自动读取 requirements.txt 文件并安装所有列出的库
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      # 第 4 步：使用 PyInstaller 打包应用程序
      # --onefile: 打包成一个独立的 .exe 文件
      # --windowed: 运行时不显示命令行窗口（GUI应用必备）
      # --name: 指定生成的可执行文件名
      # --icon: (可选) 如果你有图标文件，可以取消注释并使用它
      - name: Build application with PyInstaller
        run: |
          pyinstaller --noconfirm --onefile --windowed --name boyin boyin.py
          # pyinstaller --noconfirm --onefile --windowed --icon=your_icon.ico --name boyin boyin.py

      # 第 5 步：上传构建好的可执行文件作为 "artifact"
      # 这样你就可以在 Actions 页面下载它
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          # 上传文件的名称
          name: TimedBroadcastApp-Windows
          # 要上传的文件路径 (PyInstaller 会在 dist 文件夹下生成 .exe 文件)
          path: dist/TimedBroadcastApp.exe
